# main으로 merge 혹은 main에서 코드 변경 시 실행 
# docker 이미지 생성 후 docker 허브로 푸쉬하는 workflow
# 1. create build file 2. docker image build 3. push to docker hub

name: Docker Image CI
on:
  push:
    branches: [ "main" ]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 코드 체크아웃
    - uses: actions/checkout@v3
    
    # JDK 21 설정 (Dockerfile에 맞게 조정)
    - name: JDK 21 설정
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
    
    # Gradle 캐싱 (빌드 속도 향상)
    - name: Gradle 캐싱
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # Gradle 권한 부여
    - name: Gradle 권한 부여
      run: chmod +x ./gradlew
    
    # application.yml 생성
    - name: application.yml 생성
      env:
        YAML_CONTENT: ${{secrets.YAML_PROD}}
      run: |
        mkdir -p src/main/resources
        echo "$YAML_CONTENT" > src/main/resources/application.yml

    # Gradle로 빌드 실행
    - name: Gradle 빌드
      run: ./gradlew clean build
    
    # Docker Hub 로그인
    - name: Docker Hub 로그인
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    # Docker Buildx 설정 (멀티 플랫폼 빌드 지원)
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v2
    
    # Docker 빌드 및 푸시 (기존 Dockerfile 사용)
    - name: Docker 빌드 및 푸시
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/springboot-app:latest, ${{ secrets.DOCKER_HUB_USERNAME }}/springboot-app:${{ github.sha }}
